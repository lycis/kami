CONCEPT
    Driver Intercom

 OVERVIEW
    The driver intercom handles the communication between drivers and front
    ends via network (TCP). It is used whenever a driver or front-end wants
    to exchange data with a remote located component (e.g. remote sharding,
    pushing information to users). The protocol is designed to send
    multiple types of commands and requests at once.

    In general the intercom works by exchanging JSON documents between involved
    participants (P). Each JSON may contain a number of information snippets
    for a target component (C) that is attached to a participant.

                               +------------+
        +----      +----+     /              \     +----+     +----+
        | C1 | --> | P1 | <--+ NETWORK (TCP)  +--> | P2 | <-- | C2 |
        +----+     +----+     \              /     +----+     +----+
                               +------------+

    PARTICIPANTs are responsible for exchaning messages in behalf of a component.
    They are the only actual parts communicating within the network. A participant
    dispatches message in behalf of a component and will in general not communicate
    otherwise except for keep-alive messages. A participant may be connected to
    multiple other participants and will have multiple components attached.

    COMPONENTs are attached to a participant and are the sources and sinks for
    messages. They are the only actual parts that send and receive messages
    via their attached participant. Each component may only be connected to one
    participant to prevent message cycles and ambiguous routing paths.

MESSAGE FORMAT
    Each message is represent by a JSON document that is sent from one participant
    to another. There is a finite list of supported fields for this JSON
    document. Anonymous fields are not supported. This section lists all
    supported key names, their format and expected content. Simple fields
    will be fully explained inline while more complex topics will be present
    in their own section.

    "envelope":
        The envelope key contains the basic routing information for the
        snippet. It is a JSON document. For more see ADDRESSING. The
        envelope is only required when addressing components and not
        required when participants are exchanging information (e.g.
        advertise or neighbours labels)

        "to":
            address of the target component (string)

        "from":
            address of the sending component (string)

        "seq-id":
            the sequential ID of this message. The sending participant has to
            use incrementing, sequential IDs for all messages and also has to
            guarantee they are not repeated within a sane time range and also
            that they incremented with each sent snippet. The participant does
            not have to guarantee that they are incremented by the same number
            every time.

            Eample:
                 seq-id 1 may be followed by2 and then 97 but not 2

            There is only one exception to the incrementation rule:
            The IDs may switch from positive to negative and vice versa. This
            is called an ID-roll-over and may be used for conveniently handling
            "endless-increments". When such a roll-over happens it indicates
            that previously sent IDs might be repeated in future.

        "relay":
            contains a list of participants that forwarded that request before
            it hit its target (string array)

    "advertise":
        This element contains advertisement information of the sending participant
        (see STARTUPADVERTISING below). It is usually sent when a participant
        goes online and makes contact with its known neighbours but it also may
        be repeated at any time when settings of the participant change (e.g.
        extensions are supported or desupported) during runtime.

        "address":
            contains the addresses and ports that this participant has to be
            contacted at (e.g. 192.168.0.1:5001) (string array)

        "extensions":
            lists all supported intercom extensions (string array)

    "neighbours":
        The neighbours label is used to update directly connected participants
        with a list of known neighbours of yourself. This information may be
        required by participants for interouting information snippets. It
        consists of a list of JSON objects, one for each neighbours advertise
        information.


ADDRESSING
    As all participants together may form rather complex networks adressing a
    snippet is very important (and thus also very simple). Basically all
    addresses are similar to E-Mail addresses: "<component>@<provider>"

    The <component> is identified by its provider-unique ID that is advertised
    by the component itself. The provider may reject duplicate IDs. The
    component ID must consist of alphanumerical (A-Za-z0-9) characters
    without spaces and may contain these additional characters: .-_

    The <provider> is simply identified by its IP address or DNS name.

    Examples:
        shard_7@192.168.5.1
        main.driver@example.com
        root@server

STARTUP ADVERTISING
    A new participant that starts has to advertise himself to all known
    neighbors. This is done sending the "advertise" label and providing the
    required information. It is expected that the remote participant replies
    with his neighbours list when the sending participant was accepted or
    simply disconnects in the other case. A disconnect at this stage
    indicates that the receiving participant will, for some reason, not operate
    with the sender (e.g. protocol version mismatch, required but unsupported
    extensions).

    Flow Chart:
                  Sender                                           Receiver
     (start) ----> +
                   |
                   |-------------------(advertise)------------------->+
                   |                                                  |
                   |<-----------------(neighbours)--------------------+
                   |
     (accepted <---+
      neighbour)

WIRE FORMAT
    The line format describes how data is transferred "over the wire". For the
    intercom protocol this is very simple. Each message is a base64 encoded
    JSON string that ends with a line break (\n). The base64 encoding prevents
    necessary conversions of special characters.